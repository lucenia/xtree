name: Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for the release'
        required: true
        type: string

jobs:
  build-release:
    name: Build Release Artifacts
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            platform: Linux
            arch: x86_64
            cmake-generator: "Unix Makefiles"
          - os: macos-latest
            platform: Mac_OS_X
            arch: x86_64
            cmake-generator: "Unix Makefiles"
          - os: windows-latest
            platform: Windows
            arch: x86_64
            cmake-generator: "MinGW Makefiles"
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      
      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libboost-all-dev
      
      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install cmake boost
      
      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
          choco install mingw
          choco install boost-msvc-14.3
      
      - name: Get version from tag
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.tag_name }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT
        shell: bash
      
      - name: Verify version consistency
        run: |
          PROPS_VERSION=$(grep "lucenia" buildSrc/version.properties | cut -d'=' -f2 | tr -d ' ')
          TAG_VERSION="${{ steps.get_version.outputs.version_number }}"
          if [ "$PROPS_VERSION" != "$TAG_VERSION" ]; then
            echo "Error: Version mismatch - properties: $PROPS_VERSION, tag: $TAG_VERSION"
            exit 1
          fi
        shell: bash
      
      - name: Build release artifacts
        run: ./gradlew clean build --no-daemon
        env:
          CMAKE_BUILD_TYPE: Release
          CMAKE_GENERATOR: ${{ matrix.cmake-generator }}
      
      - name: Package artifacts
        run: |
          mkdir -p release-artifacts
          
          # Copy libraries
          if [ -d "build/native/lib" ]; then
            cp build/native/lib/* release-artifacts/ 2>/dev/null || true
          fi
          
          # Copy test executable for verification
          if [ -f "build/native/bin/xtree_tests" ]; then
            cp build/native/bin/xtree_tests release-artifacts/
          elif [ -f "build/native/bin/xtree_tests.exe" ]; then
            cp build/native/bin/xtree_tests.exe release-artifacts/
          fi
          
          # Create platform-specific archive
          cd release-artifacts
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a ../xtree-${{ steps.get_version.outputs.version }}-${{ matrix.platform }}-${{ matrix.arch }}.zip *
          else
            tar -czf ../xtree-${{ steps.get_version.outputs.version }}-${{ matrix.platform }}-${{ matrix.arch }}.tar.gz *
          fi
        shell: bash
      
      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: xtree-${{ steps.get_version.outputs.version }}-${{ matrix.platform }}-${{ matrix.arch }}
          path: |
            xtree-${{ steps.get_version.outputs.version }}-${{ matrix.platform }}-${{ matrix.arch }}.*

  create-release:
    name: Create GitHub Release
    needs: build-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get version from tag
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.tag_name }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
        shell: bash
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts
      
      - name: Generate release notes
        run: |
          echo "## XTree ${{ steps.get_version.outputs.version }}" > release-notes.md
          echo "" >> release-notes.md
          echo "High-performance spatial indexing library with sortable integer optimization." >> release-notes.md
          echo "" >> release-notes.md
          echo "### Features" >> release-notes.md
          echo "- Sortable integer representation for exact float precision" >> release-notes.md
          echo "- Optimized for billion-point scale operations" >> release-notes.md
          echo "- Cross-platform support (Linux, macOS, Windows)" >> release-notes.md
          echo "- Memory-safe C++17 implementation" >> release-notes.md
          echo "" >> release-notes.md
          echo "### Changes" >> release-notes.md
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            git log ${LAST_TAG}..HEAD --oneline >> release-notes.md
          else
            echo "Initial release" >> release-notes.md
          fi
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: XTree ${{ steps.get_version.outputs.version }}
          body_path: release-notes.md
          files: release-artifacts/*/*
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.version, '-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}