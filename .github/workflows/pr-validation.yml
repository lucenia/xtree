name: PR Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened ]

jobs:
  validate-wrapper:
    name: Validate Gradle Wrapper
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Validate Gradle wrapper
        uses: gradle/actions/wrapper-validation@v4
      
      - name: Verify SHA256 checksum
        run: ./gradlew verifyWrapper

  build-and-test:
    name: Build and Test (${{ matrix.os }} ${{ matrix.arch || 'x64' }})
    needs: validate-wrapper
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          # Default configurations for each OS
          - os: ubuntu-latest
            runs-on: ubuntu-latest
            cmake-generator: "Unix Makefiles"
          - os: macos-latest
            runs-on: macos-13
            cmake-generator: "Unix Makefiles"
          - os: windows-latest
            runs-on: windows-latest
            cmake-generator: "Visual Studio 17 2022"
          # Additional ARM builds
          - os: ubuntu-latest
            arch: arm64
            runs-on: ubuntu-24.04-arm
            cmake-generator: "Unix Makefiles"
          - os: macos-latest
            arch: arm64
            runs-on: macos-14
            cmake-generator: "Unix Makefiles"
    
    runs-on: ${{ matrix.runs-on }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      
      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libboost-all-dev
      
      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install cmake boost
      
      - name: Setup MSVC (Windows)
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1
      
      - name: Install CMake (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
      
      - name: Install Boost (Windows)
        if: matrix.os == 'windows-latest'
        uses: MarkusJx/install-boost@v2.4.5
        id: install-boost
        with:
          boost_version: 1.83.0
          toolset: msvc
          platform_version: 2022
          boost_install_dir: C:\boost
      
      - name: Configure environment (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          # Set Boost environment variables
          echo "BOOST_ROOT=${{ steps.install-boost.outputs.BOOST_ROOT }}" >> $GITHUB_ENV
      
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: wrapper
      
      - name: Build with Gradle
        run: ./gradlew build -x test --no-daemon
        env:
          CMAKE_GENERATOR: ${{ matrix.cmake-generator }}
          CMAKE_TOOLCHAIN_FILE: ${{ env.CMAKE_TOOLCHAIN_FILE }}
          VCPKG_TARGET_TRIPLET: ${{ env.VCPKG_TARGET_TRIPLET }}
      
      - name: Run tests
        run: ./gradlew test --no-daemon
        env:
          CMAKE_GENERATOR: ${{ matrix.cmake-generator }}
          CMAKE_TOOLCHAIN_FILE: ${{ env.CMAKE_TOOLCHAIN_FILE }}
          VCPKG_TARGET_TRIPLET: ${{ env.VCPKG_TARGET_TRIPLET }}
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}
          path: |
            **/build/test-results/
            **/build/reports/tests/
            **/build/native/Testing/
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.os }}
          path: |
            **/build/native/lib/
            **/build/native/bin/

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check file permissions
        run: |
          if [ ! -x "./gradlew" ]; then
            echo "Error: gradlew is not executable"
            exit 1
          fi
      
      - name: Check for TODO comments
        run: |
          echo "Checking for TODO comments..."
          grep -rn "TODO\|FIXME\|XXX" --include="*.cpp" --include="*.h" --include="*.hpp" . || true
      
      - name: Verify documentation
        run: |
          for file in README.md CONTRIBUTING.md TESTING.md; do
            if [ ! -f "$file" ]; then
              echo "Error: Required documentation file $file is missing"
              exit 1
            fi
          done

  performance-check:
    name: Performance Regression Check
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libboost-all-dev
      
      - name: Build optimized version
        run: ./gradlew :core:src:main:cpp:buildNative --no-daemon
      
      - name: Run performance tests
        run: |
          ./build/native/bin/xtree_tests --gtest_filter=*Performance* --gtest_output=json:perf-results.json
      
      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: perf-results.json