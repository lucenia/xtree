/*
 * SPDX-License-Identifier: AGPL-3.0-or-later
 *
 * The Lucenia project is free software: you can redistribute it
 * and/or modify it under the terms of the GNU Affero General
 * Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public
 * License along with this program. If not, see:
 * https://www.gnu.org/licenses/agpl-3.0.html
 */

def printBuildBanner() {
    def os = "${System.getProperty("os.name")} ${System.getProperty("os.version")} (${System.getProperty("os.arch")})"
    def jdkVersion = "${System.getProperty("java.version")}"
    def jdkVendor = "${System.getProperty("java.vendor")}"
    def javaHome = System.getenv("JAVA_HOME") ?: "Not Set"
    def gradleVersion = gradle.gradleVersion
    def seed = new Random().nextLong().toString(16).toUpperCase()

    def cmakeVersion = "unknown"
    try {
        def proc = ['cmake', '--version'].execute()
        def output = proc.text.readLines()
        if (!output.isEmpty()) {
            cmakeVersion = output[0].trim()
        }
    } catch (Exception ignored) {
        cmakeVersion = "(not found)"
    }

    println """
=======================================
Lucenia Build Hamster says Hello!
  Gradle Version        : ${gradleVersion}
  OS Info               : ${os}
  JDK Version           : ${jdkVersion} (${jdkVendor})
  JAVA_HOME             : ${javaHome}
  CMake Version         : ${cmakeVersion}
  Random Testing Seed   : ${seed}
  In FIPS 140 mode      : false
=======================================
"""
}

gradle.taskGraph.whenReady {
    printBuildBanner()
}

// Support --snapshot flag for convenience
if (project.hasProperty('snapshot') || gradle.startParameter.taskNames.any { it.contains('snapshot') }) {
    ext.versionSuffixOverride = '-SNAPSHOT'
}

// Configure wrapper task to automatically add SHA256 checksum
wrapper {
    gradleVersion = '8.14.3'
    distributionType = Wrapper.DistributionType.BIN
    
    doLast {
        // Fetch and add SHA256 checksum
        def sha256Url = new URL(distributionUrl + ".sha256")
        def sha256Sum = sha256Url.text.trim()
        
        // Add checksum to properties file
        def props = file('gradle/wrapper/gradle-wrapper.properties')
        def content = props.text
        
        if (!content.contains('distributionSha256Sum=')) {
            // Add after distributionUrl
            content = content.replaceFirst(
                /(distributionUrl=.*\n)/, 
                '$1distributionSha256Sum=' + sha256Sum + '\n'
            )
            props.text = content
            println "Added SHA256 checksum to wrapper properties: ${sha256Sum}"
        } else {
            // Update existing checksum
            content = content.replaceFirst(
                /distributionSha256Sum=.*/, 
                'distributionSha256Sum=' + sha256Sum
            )
            props.text = content
            println "Updated SHA256 checksum in wrapper properties: ${sha256Sum}"
        }
    }
}

// Task to verify Gradle wrapper integrity
task verifyWrapper {
    group = 'verification'
    description = 'Verifies the Gradle wrapper SHA256 checksum'
    
    doLast {
        def props = new Properties()
        file('gradle/wrapper/gradle-wrapper.properties').withInputStream { props.load(it) }
        
        def configuredSha = props.getProperty('distributionSha256Sum')
        if (!configuredSha) {
            throw new GradleException("No SHA256 checksum found in gradle-wrapper.properties")
        }
        
        def distributionUrl = props.getProperty('distributionUrl')
        def version = distributionUrl.replaceAll(/.*gradle-(.+)-bin\.zip/, '$1')
        
        // Fetch official SHA256
        def sha256Url = new URL(distributionUrl + ".sha256")
        def officialSha = sha256Url.text.trim()
        
        if (configuredSha == officialSha) {
            println "âœ“ Gradle wrapper verification successful!"
            println "  Version: ${version}"
            println "  SHA256:  ${configuredSha}"
        } else {
            throw new GradleException("SHA256 checksum mismatch!\n" +
                "  Expected: ${officialSha}\n" +
                "  Found:    ${configuredSha}")
        }
    }
}

allprojects {
    repositories {
        mavenCentral()
    }
}

// Include the native subproject and hook into Gradle's build lifecycle
subprojects {
    apply plugin: 'base'
}
